{{ template "chart.header" . }}
{{ template "chart.description" . }}

{{ template "chart.versionBadge" . }}{{ template "chart.typeBadge" . }}{{ template "chart.appVersionBadge" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

## Examples

### Example Configuration Values

#### Replicas

```yaml
replicaCount: 3
```

#### Image Pull Secrets

```yaml
imagePullSecrets:
  - name: "docker-login-test-example-net-9443"
```

#### Pod Annotations

```yaml
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/path: "/metrics"
  prometheus.io/port: "8080"
```

#### Pod Labels

```yaml
podLabels:
  app.kubernetes.io/name: myapp
  app.kubernetes.io/instance: myapp-instance
  app.kubernetes.io/version: "1.0"
  app.kubernetes.io/component: backend
  app.kubernetes.io/part-of: myapp
  app.kubernetes.io/managed-by: helm
```

#### [Pod Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)

```yaml
podSecurityContext:
  fsGroup: 2000
```

#### [Security Context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)

```yaml
securityContext:
  runAsUser: 1000
  runAsGroup: 3000
  fsGroup: 2000
```

#### [Resource Requests and Limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)

```yaml
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 200m
    memory: 256Mi
```

#### [Volume](https://kubernetes.io/docs/concepts/storage/volumes/)

```yaml
volumes:
  - name: myvolume
    type: secret
    secret:
      secretName: mysecret
  - name: myvolume2
    type: configMap
    configMap:
      name: myconfigmap
  - name: myvolume3
    type: persistentVolumeClaim
    persistentVolumeClaim:
      claimName: mypvc
```

#### [Volume Mounts](https://kubernetes.io/docs/concepts/storage/volumes/)

```yaml
volumeMounts:
  - name: myvolume
    mountPath: /myvolume
    readOnly: true
  - name: myvolume2
    mountPath: /myvolume2
  - name: myvolume3
    mountPath: /myvolume3
```

#### [Node Selector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/)

```yaml
nodeSelector:
  kubernetes.io/os: linux
```

#### [Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/)

```yaml
tolerations:
  - key: "k8s/node-pool-name"
    operator: "Equal"
    value: "metrics"
    effect: "NoSchedule"
```

#### [Affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity)

```yaml
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: k8s/node-pool-name
          operator: In
          values:
          - metrics
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 1
      preference:
        matchExpressions:
        - key: another-node-label-key
          operator: In
          values:
          - another-node-label-value
```

#### ConfigMap

```yaml
configMap:
  username: admin
  environment: production
  host: example.com
```

#### Secret

```yaml
secret:
  password: AQ23sdsd
  username: admin
  host: example.com
```

#### CronJobs

```yaml
cronJobs:
  cron:
    tolerations: []
    annotations: {}
    schedule: "00 12 * * 1-5"
    serviceAccountName: null
    successfulJobsHistoryLimit: 2
    failedJobsHistoryLimit: 2
    args: ["sh", "-c", "echo \"ciao\""]
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
  testcron:
    schedule: "00 12 * * 1-5"
    command: ["sh", "-c"]
    args: ["echo", "ciao"]
    affinity: *affinity
    tolerations: *tolerations
    nodeSelector: *nodeSelector
    resources: *resources
```

#### [Host Aliases](https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/)

```yaml
hostAliases:
  - ip: "127.0.0.1"
    hostnames:
    - "foo.local"
    - "bar.local"
  - ip: "10.1.2.3"
    hostnames:
    - "foo.remote"
    - "bar.remote"
```

#### DNS Configuration

```yaml
dnsConfig:
  searches:
    - example.net
```

#### Environment Variables from ConfigMaps

```yaml
envFromConfigMaps:
  - myconfigmap
  - mongodb-0-config
```

#### Environment Variables from Secrets

```yaml
envFromSecrets:
  - mysecret
  - mongodb-0-secret
```

#### Service and Ingress

```yaml
service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: cluster-ca-issuer
  hosts:
    - host: app.example.net
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - secretName: app-tls
      hosts:
        - app.example.net
```

#### Liveness and Readiness Probes

```yaml
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http
```

#### Autoscaling

```yaml
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
```

#### Pod Recreation

```yaml
podRecreation:
  enabled: true
```
OR:
```yaml
podRecreation:
  enabled: false
```

#### Using `additionalEnvs` to Add Environment Variables

```yaml
additionalEnvs:
  - name: NEWPASS
    valueFrom:
        secretKeyRef:
          name: mysecret
          key: test
  - name: NEWCONFIG
    valueFrom:
        configMapKeyRef:
          name: myconfig
          key: test
  - name: API_URL
    value: "https://api.example.com"
```

{{ template "helm-docs.versionFooter" . }}
